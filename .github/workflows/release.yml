name: build-release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  macos-build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Homebrew
        run: |
          brew update

      - name: Install dependencies
        run: |
          brew install cmake ninja pkg-config
          brew install --cask obs

      - name: Find OBS headers
        run: |
          HEADER=$(find /Applications/OBS.app -name "obs-module.h" -type f | head -1)
          if [ -z "$HEADER" ]; then
            echo "obs-module.h not found" >&2
            exit 1
          fi
          OBS_INCLUDE_DIR=$(dirname "$HEADER")
          echo "Found obs-module.h at: $HEADER"
          echo "OBS_INCLUDE_DIR=$OBS_INCLUDE_DIR" >> $GITHUB_ENV
          # Look for a generated config directory (contains obsconfig.h) if present
          GEN_DIR=$(find /Applications/OBS.app -name "obsconfig.h" -type f -exec dirname {} \; | head -1)
          if [ -n "$GEN_DIR" ]; then
            echo "OBS_GENERATED_LIBOBS_INCLUDE_DIR=$GEN_DIR" >> $GITHUB_ENV
          fi
          echo "OBS_LIB_DIR=/Applications/OBS.app/Contents/Frameworks" >> $GITHUB_ENV

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..

      - name: Build
        run: |
          cmake --build build --config Release

      - name: Package artifact
        run: |
          cd build
          PLUGIN_NAME=obs-equi2fisheye
          BUNDLE=$(ls -1 | grep "${PLUGIN_NAME}\.plugin" || true)
          if [ -z "$BUNDLE" ]; then
            BUNDLE=$(ls -1 bin | grep "${PLUGIN_NAME}\.plugin" || true)
            [ -n "$BUNDLE" ] && BUNDLE="bin/$BUNDLE"
          fi
          echo "Bundle path: $BUNDLE"
          mkdir -p package/${PLUGIN_NAME}/bin package/${PLUGIN_NAME}/data
          if [ -n "$BUNDLE" ]; then
            cp -R "$BUNDLE" package/${PLUGIN_NAME}/bin/
          fi
          cp -R ../data package/${PLUGIN_NAME}/
          cd package
          zip -r ../${PLUGIN_NAME}-macos.zip ${PLUGIN_NAME}
          cd ..
          echo "ARTIFACT=${PLUGIN_NAME}-macos.zip" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: obs-equi2fisheye-macos
          path: build/${{ env.ARTIFACT }}

  release:
    needs: macos-build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: obs-equi2fisheye-macos
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
