name: build-release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  macos-build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Homebrew
        run: |
          brew update

      - name: Install dependencies
        run: |
          brew install cmake ninja pkg-config curl
          brew install --cask obs

      - name: Fetch OBS headers (source archive)
        run: |
          OBS_VER=$(mdfind kMDItemCFBundleIdentifier = "com.obsproject.obs-studio" | head -n1 | xargs -I{} /usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' {}/Contents/Info.plist)
          if [ -z "$OBS_VER" ]; then OBS_VER=32.0.1; fi
          echo "OBS_VER=$OBS_VER"
          curl -L -o obs-src.tar.gz https://github.com/obsproject/obs-studio/archive/refs/tags/$OBS_VER.tar.gz
          tar xf obs-src.tar.gz
          OBS_SRC_DIR=$(echo obs-studio-*)
          echo "OBS_SRC_DIR=$OBS_SRC_DIR" >> $GITHUB_ENV

      - name: Fetch SIMDE headers
        run: |
          curl -L -o simde.tar.gz https://github.com/simd-everywhere/simde/archive/refs/tags/v0.8.2.tar.gz
          tar xf simde.tar.gz
          SIMDE_DIR=$(echo simde-*)
          echo "SIMDE_INCLUDE_DIR=$GITHUB_WORKSPACE/$SIMDE_DIR" >> $GITHUB_ENV

      - name: Configure
        run: |
          mkdir -p build
          cd build
          export OBS_INCLUDE_DIR=$GITHUB_WORKSPACE/$OBS_SRC_DIR/libobs
          export OBS_LIB_DIR=/Applications/OBS.app/Contents/Frameworks
          export SIMDE_INCLUDE_DIR=$SIMDE_INCLUDE_DIR
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..

      - name: Build
        run: |
          cmake --build build --config Release

      - name: Package artifact
        run: |
          cd build
          PLUGIN_NAME=obs-equi2fisheye
          BUNDLE=$(ls -1 | grep "${PLUGIN_NAME}\.plugin" || true)
          if [ -z "$BUNDLE" ]; then
            BUNDLE=$(ls -1 bin | grep "${PLUGIN_NAME}\.plugin" || true)
            [ -n "$BUNDLE" ] && BUNDLE="bin/$BUNDLE"
          fi
          echo "Bundle path: $BUNDLE"
          mkdir -p package/${PLUGIN_NAME}/bin package/${PLUGIN_NAME}/data
          if [ -n "$BUNDLE" ]; then
            cp -R "$BUNDLE" package/${PLUGIN_NAME}/bin/
          fi
          cp -R ../data package/${PLUGIN_NAME}/
          cd package
          zip -r ../${PLUGIN_NAME}-macos.zip ${PLUGIN_NAME}
          cd ..
          echo "ARTIFACT=${PLUGIN_NAME}-macos.zip" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: obs-equi2fisheye-macos
          path: build/${{ env.ARTIFACT }}

  release:
    needs: macos-build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: obs-equi2fisheye-macos
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
