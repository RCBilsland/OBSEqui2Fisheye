name: build-release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  macos-build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Homebrew
        run: |
          brew update

      - name: Install dependencies
        run: |
          brew install cmake ninja pkg-config
          brew install --cask obs

      - name: Download OBS source and SIMDE for headers
        run: |
          # Download OBS source to get headers
          curl -L -o obs-src.tar.gz https://github.com/obsproject/obs-studio/archive/refs/tags/32.0.1.tar.gz
          tar xf obs-src.tar.gz
          OBS_SRC_DIR=$(echo obs-studio-*)
          echo "OBS_SRC_DIR=$OBS_SRC_DIR" >> $GITHUB_ENV
          # Download SIMDE headers
          curl -L -o simde.tar.gz https://github.com/simd-everywhere/simde/archive/refs/tags/v0.8.2.tar.gz
          tar xf simde.tar.gz
          SIMDE_DIR=$(echo simde-*)
          echo "SIMDE_DIR=$SIMDE_DIR" >> $GITHUB_ENV
          # Set include directories
          echo "OBS_INCLUDE_DIR=$GITHUB_WORKSPACE/$OBS_SRC_DIR/libobs" >> $GITHUB_ENV
          echo "SIMDE_INCLUDE_DIR=$GITHUB_WORKSPACE/$SIMDE_DIR" >> $GITHUB_ENV
          # Use OBS app for libraries
          echo "OBS_LIB_DIR=/Applications/OBS.app/Contents/Frameworks" >> $GITHUB_ENV

      - name: Create minimal OBS config
        run: |
          # Create a minimal obsconfig.h file
          mkdir -p obs-config
          cat > obs-config/obsconfig.h << 'EOF'
          #ifndef OBS_CONFIG_H
          #define OBS_CONFIG_H
          
          #define OBS_VERSION "32.0.1"
          #define OBS_VERSION_CANONICAL "32.0.1"
          #define OBS_VERSION_MAJOR 32
          #define OBS_VERSION_MINOR 0
          #define OBS_VERSION_PATCH 1
          
          #define BUILD_CAPTIONS 1
          #define BUILD_BROWSER 0
          #define BUILD_VIRTUALCAM 0
          #define BUILD_UI 0
          #define BUILD_WEBSOCKET 0
          
          #define ENABLE_SCRIPTING 0
          #define ENABLE_SPARKLE_UPDATER 0
          #define ENABLE_BREAKPAD 0
          #define ENABLE_AJA 0
          
          #define HAVE_ALSA 0
          #define HAVE_PULSEAUDIO 0
          #define HAVE_JACK 0
          #define HAVE_DECKLINK 0
          #define HAVE_V4L2 0
          #define HAVE_FFMPEG 1
          #define HAVE_X264 1
          #define HAVE_X265 0
          #define HAVE_LIBFDK 0
          #define HAVE_CURL 1
          #define HAVE_WINRT 0
          #define HAVE_WINMM 0
          #define HAVE_WASAPI 0
          #define HAVE_WINMF 0
          #define HAVE_D3D11 0
          #define HAVE_D3D12 0
          #define HAVE_NVENC 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_VAAPI 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_DXVA2 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_D3D11VA 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_OPENCL 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_CUDA 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_VULKAN 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_VIDEOTOOLBOX 1
          #define HAVE_FFMPEG_AV_HWCONTEXT_MEDIACODEC 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_OPENCL 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_DRM 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_OPENCL 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_VAAPI 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_DXVA2 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_D3D11VA 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_OPENCL 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_CUDA 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_VULKAN 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_VIDEOTOOLBOX 1
          #define HAVE_FFMPEG_AV_HWCONTEXT_MEDIACODEC 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_OPENCL 0
          #define HAVE_FFMPEG_AV_HWCONTEXT_DRM 0
          
          #define PLUGIN_SUFFIX ".plugin"
          #define PLUGIN_DESTINATION "obs-plugins"
          #define OBS_DATA_PATH "data"
          #define OBS_INSTALL_PREFIX "/usr/local"
          #define OBS_PLUGIN_PATH "obs-plugins"
          #define OBS_PLUGIN_DATA_PATH "data/obs-plugins"
          
          #define OBS_RELATIVE_PREFIX ""
          #define OBS_UNIX_STRUCTURE 0
          #define OBS_MACOS_BUNDLE 1
          
          #endif
          EOF
          echo "OBS_GENERATED_INCLUDE_DIR=$GITHUB_WORKSPACE/obs-config" >> $GITHUB_ENV

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..

      - name: Build
        run: |
          cmake --build build --config Release

      - name: Package artifact
        run: |
          cd build
          PLUGIN_NAME=obs-equi2fisheye
          BUNDLE=$(ls -1 | grep "${PLUGIN_NAME}\.plugin" || true)
          if [ -z "$BUNDLE" ]; then
            BUNDLE=$(ls -1 bin | grep "${PLUGIN_NAME}\.plugin" || true)
            [ -n "$BUNDLE" ] && BUNDLE="bin/$BUNDLE"
          fi
          echo "Bundle path: $BUNDLE"
          mkdir -p package/${PLUGIN_NAME}/bin package/${PLUGIN_NAME}/data
          if [ -n "$BUNDLE" ]; then
            cp -R "$BUNDLE" package/${PLUGIN_NAME}/bin/
          fi
          cp -R ../data package/${PLUGIN_NAME}/
          cd package
          zip -r ../${PLUGIN_NAME}-macos.zip ${PLUGIN_NAME}
          cd ..
          echo "ARTIFACT=${PLUGIN_NAME}-macos.zip" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: obs-equi2fisheye-macos
          path: build/${{ env.ARTIFACT }}

  release:
    needs: macos-build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: obs-equi2fisheye-macos
          path: dist

      - name: Create GitHub Release
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Creating release for tag: $TAG_NAME"
          
          # Create release using GitHub CLI
          gh release create "$TAG_NAME" \
            --title "OBS Equi2Fisheye Plugin v$TAG_NAME" \
            --notes "OBS Studio plugin for converting equirectangular video to fisheye projection with Metal acceleration on macOS." \
            dist/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
